//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImpresosAlvarez.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ImpresosBDEntities : DbContext
    {
        public ImpresosBDEntities()
            : base("name=ImpresosBDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bitacora> Bitacora { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<Comentarios> Comentarios { get; set; }
        public virtual DbSet<Contribuyentes> Contribuyentes { get; set; }
        public virtual DbSet<Correos> Correos { get; set; }
        public virtual DbSet<DetalleFactura> DetalleFactura { get; set; }
        public virtual DbSet<DetalleNota> DetalleNota { get; set; }
        public virtual DbSet<Disenos> Disenos { get; set; }
        public virtual DbSet<Entrega> Entrega { get; set; }
        public virtual DbSet<FacturaOrden> FacturaOrden { get; set; }
        public virtual DbSet<Facturas> Facturas { get; set; }
        public virtual DbSet<FormasPago> FormasPago { get; set; }
        public virtual DbSet<Impresion> Impresion { get; set; }
        public virtual DbSet<Materia> Materia { get; set; }
        public virtual DbSet<NotaOrden> NotaOrden { get; set; }
        public virtual DbSet<Notas> Notas { get; set; }
        public virtual DbSet<NumeroNota> NumeroNota { get; set; }
        public virtual DbSet<OrdenMateria> OrdenMateria { get; set; }
        public virtual DbSet<Pagos> Pagos { get; set; }
        public virtual DbSet<PagosNotas> PagosNotas { get; set; }
        public virtual DbSet<Parcialidades> Parcialidades { get; set; }
        public virtual DbSet<ProductosServicios> ProductosServicios { get; set; }
        public virtual DbSet<Recordatorios> Recordatorios { get; set; }
        public virtual DbSet<Salidas> Salidas { get; set; }
        public virtual DbSet<Terminado> Terminado { get; set; }
        public virtual DbSet<TipoMateria> TipoMateria { get; set; }
        public virtual DbSet<Unidades> Unidades { get; set; }
        public virtual DbSet<UsosCFDI> UsosCFDI { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<Configuracion> Configuracion { get; set; }
        public virtual DbSet<Valores> Valores { get; set; }
        public virtual DbSet<Categorias> Categorias { get; set; }
        public virtual DbSet<Insumos> Insumos { get; set; }
        public virtual DbSet<EntradasInventario> EntradasInventario { get; set; }
        public virtual DbSet<SalidasInventario> SalidasInventario { get; set; }
        public virtual DbSet<Ordenes> Ordenes { get; set; }
        public virtual DbSet<FacturaDigital> FacturaDigital { get; set; }
    
        public virtual int Actualizar_Amparo_Factura(Nullable<int> id_factura, string amparo)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            var amparoParameter = amparo != null ?
                new ObjectParameter("amparo", amparo) :
                new ObjectParameter("amparo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar_Amparo_Factura", id_facturaParameter, amparoParameter);
        }
    
        public virtual int Actualizar_Cantidad_Materia(Nullable<int> id_materia, Nullable<double> cantidad)
        {
            var id_materiaParameter = id_materia.HasValue ?
                new ObjectParameter("id_materia", id_materia) :
                new ObjectParameter("id_materia", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar_Cantidad_Materia", id_materiaParameter, cantidadParameter);
        }
    
        public virtual int Actualizar_Cotizacion(Nullable<int> id_orden, Nullable<double> total, string otros_4, string notas)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var otros_4Parameter = otros_4 != null ?
                new ObjectParameter("otros_4", otros_4) :
                new ObjectParameter("otros_4", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar_Cotizacion", id_ordenParameter, totalParameter, otros_4Parameter, notasParameter);
        }
    
        public virtual int Actualizar_Disenador_Orden(Nullable<int> id_orden, Nullable<int> id_usuario)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar_Disenador_Orden", id_ordenParameter, id_usuarioParameter);
        }
    
        public virtual int Actualizar_Factura_Contribuyente(Nullable<int> id_contribuyente, string numero)
        {
            var id_contribuyenteParameter = id_contribuyente.HasValue ?
                new ObjectParameter("id_contribuyente", id_contribuyente) :
                new ObjectParameter("id_contribuyente", typeof(int));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar_Factura_Contribuyente", id_contribuyenteParameter, numeroParameter);
        }
    
        public virtual int Actualizar_Materia(Nullable<int> id_tipomateria, Nullable<int> id_materia, string nombre, string descripcion, Nullable<double> cantidad, string unidad, Nullable<double> minimo)
        {
            var id_tipomateriaParameter = id_tipomateria.HasValue ?
                new ObjectParameter("id_tipomateria", id_tipomateria) :
                new ObjectParameter("id_tipomateria", typeof(int));
    
            var id_materiaParameter = id_materia.HasValue ?
                new ObjectParameter("id_materia", id_materia) :
                new ObjectParameter("id_materia", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(double));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("unidad", unidad) :
                new ObjectParameter("unidad", typeof(string));
    
            var minimoParameter = minimo.HasValue ?
                new ObjectParameter("minimo", minimo) :
                new ObjectParameter("minimo", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar_Materia", id_tipomateriaParameter, id_materiaParameter, nombreParameter, descripcionParameter, cantidadParameter, unidadParameter, minimoParameter);
        }
    
        public virtual int Actualizar_Numero_Nota(string numero)
        {
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar_Numero_Nota", numeroParameter);
        }
    
        public virtual int Actualizar_Registro_Bitacora(Nullable<int> id_bitacora, string hora_entrada, Nullable<int> id_usuario, string muestras, string salida, string fecha_entrega, string ruta)
        {
            var id_bitacoraParameter = id_bitacora.HasValue ?
                new ObjectParameter("id_bitacora", id_bitacora) :
                new ObjectParameter("id_bitacora", typeof(int));
    
            var hora_entradaParameter = hora_entrada != null ?
                new ObjectParameter("hora_entrada", hora_entrada) :
                new ObjectParameter("hora_entrada", typeof(string));
    
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            var muestrasParameter = muestras != null ?
                new ObjectParameter("muestras", muestras) :
                new ObjectParameter("muestras", typeof(string));
    
            var salidaParameter = salida != null ?
                new ObjectParameter("salida", salida) :
                new ObjectParameter("salida", typeof(string));
    
            var fecha_entregaParameter = fecha_entrega != null ?
                new ObjectParameter("fecha_entrega", fecha_entrega) :
                new ObjectParameter("fecha_entrega", typeof(string));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("ruta", ruta) :
                new ObjectParameter("ruta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar_Registro_Bitacora", id_bitacoraParameter, hora_entradaParameter, id_usuarioParameter, muestrasParameter, salidaParameter, fecha_entregaParameter, rutaParameter);
        }
    
        public virtual int Actualizar_Ruta_Orden(Nullable<int> id_orden, string ruta)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("ruta", ruta) :
                new ObjectParameter("ruta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar_Ruta_Orden", id_ordenParameter, rutaParameter);
        }
    
        public virtual int Adjuntar_Disenador_Orden(Nullable<int> id_orden, Nullable<int> id_usuario, string fecha_inicio, string hora_inicio)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            var fecha_inicioParameter = fecha_inicio != null ?
                new ObjectParameter("fecha_inicio", fecha_inicio) :
                new ObjectParameter("fecha_inicio", typeof(string));
    
            var hora_inicioParameter = hora_inicio != null ?
                new ObjectParameter("hora_inicio", hora_inicio) :
                new ObjectParameter("hora_inicio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Adjuntar_Disenador_Orden", id_ordenParameter, id_usuarioParameter, fecha_inicioParameter, hora_inicioParameter);
        }
    
        public virtual int Adjuntar_Impresion_Orden(Nullable<int> idorden, Nullable<int> idusuario, string fechainicio, string horainicio, string notas)
        {
            var idordenParameter = idorden.HasValue ?
                new ObjectParameter("idorden", idorden) :
                new ObjectParameter("idorden", typeof(int));
    
            var idusuarioParameter = idusuario.HasValue ?
                new ObjectParameter("idusuario", idusuario) :
                new ObjectParameter("idusuario", typeof(int));
    
            var fechainicioParameter = fechainicio != null ?
                new ObjectParameter("fechainicio", fechainicio) :
                new ObjectParameter("fechainicio", typeof(string));
    
            var horainicioParameter = horainicio != null ?
                new ObjectParameter("horainicio", horainicio) :
                new ObjectParameter("horainicio", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Adjuntar_Impresion_Orden", idordenParameter, idusuarioParameter, fechainicioParameter, horainicioParameter, notasParameter);
        }
    
        public virtual int Adjuntar_Orden_Factura(Nullable<int> id_orden, Nullable<int> id_factura)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Adjuntar_Orden_Factura", id_ordenParameter, id_facturaParameter);
        }
    
        public virtual int Adjuntar_Orden_Nota(Nullable<int> id_nota, Nullable<int> id_orden)
        {
            var id_notaParameter = id_nota.HasValue ?
                new ObjectParameter("id_nota", id_nota) :
                new ObjectParameter("id_nota", typeof(int));
    
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Adjuntar_Orden_Nota", id_notaParameter, id_ordenParameter);
        }
    
        public virtual int Adjuntar_Terminado_Orden(Nullable<int> idorden, Nullable<int> idusuario, string fechainicio, string horainicio, string tipo, string descripcion)
        {
            var idordenParameter = idorden.HasValue ?
                new ObjectParameter("idorden", idorden) :
                new ObjectParameter("idorden", typeof(int));
    
            var idusuarioParameter = idusuario.HasValue ?
                new ObjectParameter("idusuario", idusuario) :
                new ObjectParameter("idusuario", typeof(int));
    
            var fechainicioParameter = fechainicio != null ?
                new ObjectParameter("fechainicio", fechainicio) :
                new ObjectParameter("fechainicio", typeof(string));
    
            var horainicioParameter = horainicio != null ?
                new ObjectParameter("horainicio", horainicio) :
                new ObjectParameter("horainicio", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Adjuntar_Terminado_Orden", idordenParameter, idusuarioParameter, fechainicioParameter, horainicioParameter, tipoParameter, descripcionParameter);
        }
    
        public virtual int Agregar_Cliente(string nombre, string domicilio, string colonia, string ciudad, string estado, string codigo_postal, string tipo_persona, string telefono1, string telefono2, string telefono3, string telefono4, string contacto, string rfc, string pseudonimo, string numero_exterior, string numero_interior)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var domicilioParameter = domicilio != null ?
                new ObjectParameter("domicilio", domicilio) :
                new ObjectParameter("domicilio", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("colonia", colonia) :
                new ObjectParameter("colonia", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var codigo_postalParameter = codigo_postal != null ?
                new ObjectParameter("codigo_postal", codigo_postal) :
                new ObjectParameter("codigo_postal", typeof(string));
    
            var tipo_personaParameter = tipo_persona != null ?
                new ObjectParameter("tipo_persona", tipo_persona) :
                new ObjectParameter("tipo_persona", typeof(string));
    
            var telefono1Parameter = telefono1 != null ?
                new ObjectParameter("telefono1", telefono1) :
                new ObjectParameter("telefono1", typeof(string));
    
            var telefono2Parameter = telefono2 != null ?
                new ObjectParameter("telefono2", telefono2) :
                new ObjectParameter("telefono2", typeof(string));
    
            var telefono3Parameter = telefono3 != null ?
                new ObjectParameter("telefono3", telefono3) :
                new ObjectParameter("telefono3", typeof(string));
    
            var telefono4Parameter = telefono4 != null ?
                new ObjectParameter("telefono4", telefono4) :
                new ObjectParameter("telefono4", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("contacto", contacto) :
                new ObjectParameter("contacto", typeof(string));
    
            var rfcParameter = rfc != null ?
                new ObjectParameter("rfc", rfc) :
                new ObjectParameter("rfc", typeof(string));
    
            var pseudonimoParameter = pseudonimo != null ?
                new ObjectParameter("pseudonimo", pseudonimo) :
                new ObjectParameter("pseudonimo", typeof(string));
    
            var numero_exteriorParameter = numero_exterior != null ?
                new ObjectParameter("numero_exterior", numero_exterior) :
                new ObjectParameter("numero_exterior", typeof(string));
    
            var numero_interiorParameter = numero_interior != null ?
                new ObjectParameter("numero_interior", numero_interior) :
                new ObjectParameter("numero_interior", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_Cliente", nombreParameter, domicilioParameter, coloniaParameter, ciudadParameter, estadoParameter, codigo_postalParameter, tipo_personaParameter, telefono1Parameter, telefono2Parameter, telefono3Parameter, telefono4Parameter, contactoParameter, rfcParameter, pseudonimoParameter, numero_exteriorParameter, numero_interiorParameter);
        }
    
        public virtual int Agregar_Comentario(Nullable<int> id_orden, string comentario, string fecha)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_Comentario", id_ordenParameter, comentarioParameter, fechaParameter);
        }
    
        public virtual int Agregar_Materia(Nullable<int> id_tipomateria, string nombre, string descripcion, Nullable<double> cantidad, string unidad, Nullable<double> minimo)
        {
            var id_tipomateriaParameter = id_tipomateria.HasValue ?
                new ObjectParameter("id_tipomateria", id_tipomateria) :
                new ObjectParameter("id_tipomateria", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(double));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("unidad", unidad) :
                new ObjectParameter("unidad", typeof(string));
    
            var minimoParameter = minimo.HasValue ?
                new ObjectParameter("minimo", minimo) :
                new ObjectParameter("minimo", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_Materia", id_tipomateriaParameter, nombreParameter, descripcionParameter, cantidadParameter, unidadParameter, minimoParameter);
        }
    
        public virtual int Agregar_OrdenMateria(Nullable<int> id_orden, Nullable<int> id_materia, Nullable<double> cantidad, string unidad, string fecha_solicitado, string hora_solicitado, string notas)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var id_materiaParameter = id_materia.HasValue ?
                new ObjectParameter("id_materia", id_materia) :
                new ObjectParameter("id_materia", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(double));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("unidad", unidad) :
                new ObjectParameter("unidad", typeof(string));
    
            var fecha_solicitadoParameter = fecha_solicitado != null ?
                new ObjectParameter("fecha_solicitado", fecha_solicitado) :
                new ObjectParameter("fecha_solicitado", typeof(string));
    
            var hora_solicitadoParameter = hora_solicitado != null ?
                new ObjectParameter("hora_solicitado", hora_solicitado) :
                new ObjectParameter("hora_solicitado", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_OrdenMateria", id_ordenParameter, id_materiaParameter, cantidadParameter, unidadParameter, fecha_solicitadoParameter, hora_solicitadoParameter, notasParameter);
        }
    
        public virtual int Agregar_Pago_Factura(Nullable<int> id_factura, string tipo, Nullable<double> cantidad, string fecha, string numero_cheque, string banco, string numero_recibo, string notas)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(double));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var numero_chequeParameter = numero_cheque != null ?
                new ObjectParameter("numero_cheque", numero_cheque) :
                new ObjectParameter("numero_cheque", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("banco", banco) :
                new ObjectParameter("banco", typeof(string));
    
            var numero_reciboParameter = numero_recibo != null ?
                new ObjectParameter("numero_recibo", numero_recibo) :
                new ObjectParameter("numero_recibo", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_Pago_Factura", id_facturaParameter, tipoParameter, cantidadParameter, fechaParameter, numero_chequeParameter, bancoParameter, numero_reciboParameter, notasParameter);
        }
    
        public virtual int Agregar_Pago_Nota(Nullable<int> id_nota, string tipo, Nullable<double> cantidad, string fecha, string numero_cheque, string banco, string numero_recibo, string notas)
        {
            var id_notaParameter = id_nota.HasValue ?
                new ObjectParameter("id_nota", id_nota) :
                new ObjectParameter("id_nota", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(double));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var numero_chequeParameter = numero_cheque != null ?
                new ObjectParameter("numero_cheque", numero_cheque) :
                new ObjectParameter("numero_cheque", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("banco", banco) :
                new ObjectParameter("banco", typeof(string));
    
            var numero_reciboParameter = numero_recibo != null ?
                new ObjectParameter("numero_recibo", numero_recibo) :
                new ObjectParameter("numero_recibo", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_Pago_Nota", id_notaParameter, tipoParameter, cantidadParameter, fechaParameter, numero_chequeParameter, bancoParameter, numero_reciboParameter, notasParameter);
        }
    
        public virtual int Agregar_Recordatorio(Nullable<int> id_cliente, string nombre, string notas, string recordar_cada, string fecha_inicio, string dias_antes, string dias_despues, string estado)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            var recordar_cadaParameter = recordar_cada != null ?
                new ObjectParameter("recordar_cada", recordar_cada) :
                new ObjectParameter("recordar_cada", typeof(string));
    
            var fecha_inicioParameter = fecha_inicio != null ?
                new ObjectParameter("fecha_inicio", fecha_inicio) :
                new ObjectParameter("fecha_inicio", typeof(string));
    
            var dias_antesParameter = dias_antes != null ?
                new ObjectParameter("dias_antes", dias_antes) :
                new ObjectParameter("dias_antes", typeof(string));
    
            var dias_despuesParameter = dias_despues != null ?
                new ObjectParameter("dias_despues", dias_despues) :
                new ObjectParameter("dias_despues", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_Recordatorio", id_clienteParameter, nombreParameter, notasParameter, recordar_cadaParameter, fecha_inicioParameter, dias_antesParameter, dias_despuesParameter, estadoParameter);
        }
    
        public virtual int Agregar_Registro_Bitacora(Nullable<int> id_orden, Nullable<int> id_usuario, string cliente, string descripcion, string hora, string muestras, string salida, string fecha_entrega, string fecha_inicio, string ruta)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var horaParameter = hora != null ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(string));
    
            var muestrasParameter = muestras != null ?
                new ObjectParameter("muestras", muestras) :
                new ObjectParameter("muestras", typeof(string));
    
            var salidaParameter = salida != null ?
                new ObjectParameter("salida", salida) :
                new ObjectParameter("salida", typeof(string));
    
            var fecha_entregaParameter = fecha_entrega != null ?
                new ObjectParameter("fecha_entrega", fecha_entrega) :
                new ObjectParameter("fecha_entrega", typeof(string));
    
            var fecha_inicioParameter = fecha_inicio != null ?
                new ObjectParameter("fecha_inicio", fecha_inicio) :
                new ObjectParameter("fecha_inicio", typeof(string));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("ruta", ruta) :
                new ObjectParameter("ruta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_Registro_Bitacora", id_ordenParameter, id_usuarioParameter, clienteParameter, descripcionParameter, horaParameter, muestrasParameter, salidaParameter, fecha_entregaParameter, fecha_inicioParameter, rutaParameter);
        }
    
        public virtual int Borrar_FacturaOrden(Nullable<int> id_factura)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Borrar_FacturaOrden", id_facturaParameter);
        }
    
        public virtual int Borrar_NotaOrden(Nullable<int> idcotizacion)
        {
            var idcotizacionParameter = idcotizacion.HasValue ?
                new ObjectParameter("idcotizacion", idcotizacion) :
                new ObjectParameter("idcotizacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Borrar_NotaOrden", idcotizacionParameter);
        }
    
        public virtual int Cambiar_DiasDespuesRecordatorio(Nullable<int> id_recordatorio, string diasdespues)
        {
            var id_recordatorioParameter = id_recordatorio.HasValue ?
                new ObjectParameter("id_recordatorio", id_recordatorio) :
                new ObjectParameter("id_recordatorio", typeof(int));
    
            var diasdespuesParameter = diasdespues != null ?
                new ObjectParameter("diasdespues", diasdespues) :
                new ObjectParameter("diasdespues", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cambiar_DiasDespuesRecordatorio", id_recordatorioParameter, diasdespuesParameter);
        }
    
        public virtual int Cambiar_Estado_Cotizacion(Nullable<int> idcotizacion, string estado)
        {
            var idcotizacionParameter = idcotizacion.HasValue ?
                new ObjectParameter("idcotizacion", idcotizacion) :
                new ObjectParameter("idcotizacion", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cambiar_Estado_Cotizacion", idcotizacionParameter, estadoParameter);
        }
    
        public virtual int Cambiar_Estado_Factura(Nullable<int> id_factura, string estado)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cambiar_Estado_Factura", id_facturaParameter, estadoParameter);
        }
    
        public virtual int Cambiar_EstadoRecordatorio(Nullable<int> id_recordatorio, string estado)
        {
            var id_recordatorioParameter = id_recordatorio.HasValue ?
                new ObjectParameter("id_recordatorio", id_recordatorio) :
                new ObjectParameter("id_recordatorio", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cambiar_EstadoRecordatorio", id_recordatorioParameter, estadoParameter);
        }
    
        public virtual int Cambiar_NumeroOrden(string numero_orden, string ultimo_cambio)
        {
            var numero_ordenParameter = numero_orden != null ?
                new ObjectParameter("numero_orden", numero_orden) :
                new ObjectParameter("numero_orden", typeof(string));
    
            var ultimo_cambioParameter = ultimo_cambio != null ?
                new ObjectParameter("ultimo_cambio", ultimo_cambio) :
                new ObjectParameter("ultimo_cambio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cambiar_NumeroOrden", numero_ordenParameter, ultimo_cambioParameter);
        }
    
        public virtual int Cambiar_Pagada_Factura(Nullable<int> id_factura, string pagada)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            var pagadaParameter = pagada != null ?
                new ObjectParameter("pagada", pagada) :
                new ObjectParameter("pagada", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cambiar_Pagada_Factura", id_facturaParameter, pagadaParameter);
        }
    
        public virtual int Cambiar_Pagada_Nota(Nullable<int> id_nota, string pagada)
        {
            var id_notaParameter = id_nota.HasValue ?
                new ObjectParameter("id_nota", id_nota) :
                new ObjectParameter("id_nota", typeof(int));
    
            var pagadaParameter = pagada != null ?
                new ObjectParameter("pagada", pagada) :
                new ObjectParameter("pagada", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cambiar_Pagada_Nota", id_notaParameter, pagadaParameter);
        }
    
        public virtual int Crear_Detalle_Factura(Nullable<int> id_factura, Nullable<int> cantidad, string descripcion, Nullable<double> importe)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("importe", importe) :
                new ObjectParameter("importe", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Crear_Detalle_Factura", id_facturaParameter, cantidadParameter, descripcionParameter, importeParameter);
        }
    
        public virtual int Crear_Detalle_Nota(Nullable<int> id_nota, Nullable<int> cantidad, string descripcion, Nullable<double> importe)
        {
            var id_notaParameter = id_nota.HasValue ?
                new ObjectParameter("id_nota", id_nota) :
                new ObjectParameter("id_nota", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("importe", importe) :
                new ObjectParameter("importe", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Crear_Detalle_Nota", id_notaParameter, cantidadParameter, descripcionParameter, importeParameter);
        }
    
        public virtual int Crear_Entrega(Nullable<int> idorden, Nullable<int> idusuario, string fecha, string hora, string notas)
        {
            var idordenParameter = idorden.HasValue ?
                new ObjectParameter("idorden", idorden) :
                new ObjectParameter("idorden", typeof(int));
    
            var idusuarioParameter = idusuario.HasValue ?
                new ObjectParameter("idusuario", idusuario) :
                new ObjectParameter("idusuario", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var horaParameter = hora != null ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Crear_Entrega", idordenParameter, idusuarioParameter, fechaParameter, horaParameter, notasParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Crear_Factura(Nullable<int> id_cliente, Nullable<int> id_contribuyente, Nullable<double> subtotal, Nullable<double> total, string pagada, string estado, string fecha, string numero, string usuario)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            var id_contribuyenteParameter = id_contribuyente.HasValue ?
                new ObjectParameter("id_contribuyente", id_contribuyente) :
                new ObjectParameter("id_contribuyente", typeof(int));
    
            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("subtotal", subtotal) :
                new ObjectParameter("subtotal", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var pagadaParameter = pagada != null ?
                new ObjectParameter("pagada", pagada) :
                new ObjectParameter("pagada", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Crear_Factura", id_clienteParameter, id_contribuyenteParameter, subtotalParameter, totalParameter, pagadaParameter, estadoParameter, fechaParameter, numeroParameter, usuarioParameter);
        }
    
        public virtual int Crear_Factura_Digital(Nullable<int> id_factura, string xml, string para_recibo)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var para_reciboParameter = para_recibo != null ?
                new ObjectParameter("para_recibo", para_recibo) :
                new ObjectParameter("para_recibo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Crear_Factura_Digital", id_facturaParameter, xmlParameter, para_reciboParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Crear_Nota(Nullable<int> idcliente, Nullable<double> total, string pagada, string estado, string fecha, string numero)
        {
            var idclienteParameter = idcliente.HasValue ?
                new ObjectParameter("idcliente", idcliente) :
                new ObjectParameter("idcliente", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var pagadaParameter = pagada != null ?
                new ObjectParameter("pagada", pagada) :
                new ObjectParameter("pagada", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Crear_Nota", idclienteParameter, totalParameter, pagadaParameter, estadoParameter, fechaParameter, numeroParameter);
        }
    
        public virtual int Crear_Orden(Nullable<int> id_cliente, Nullable<double> numero, string telefono, string solicitante, string fecha_solicita, string quien_recibio, string inicio_diseno, string nombre_trabajo, Nullable<int> cantidad, string color_tintas, string tipo_papel, string con_folio, string del_numero, string al_numero, string tamano, string otros_1, string otros_2, string copia_1, string copia_2, string copia_3, string copia_4, string otros_3, string otros_4, string pegado, string engrapado, string perforacion, string rojo, string blanco, string especificaciones, string estado, string tipo, Nullable<double> total, string muestra, string fecha_muestra, string prioridad, Nullable<double> anticipo, string pagado, Nullable<double> costo_anterior, string hora, string ruta)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            var numeroParameter = numero.HasValue ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(double));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var solicitanteParameter = solicitante != null ?
                new ObjectParameter("solicitante", solicitante) :
                new ObjectParameter("solicitante", typeof(string));
    
            var fecha_solicitaParameter = fecha_solicita != null ?
                new ObjectParameter("fecha_solicita", fecha_solicita) :
                new ObjectParameter("fecha_solicita", typeof(string));
    
            var quien_recibioParameter = quien_recibio != null ?
                new ObjectParameter("quien_recibio", quien_recibio) :
                new ObjectParameter("quien_recibio", typeof(string));
    
            var inicio_disenoParameter = inicio_diseno != null ?
                new ObjectParameter("inicio_diseno", inicio_diseno) :
                new ObjectParameter("inicio_diseno", typeof(string));
    
            var nombre_trabajoParameter = nombre_trabajo != null ?
                new ObjectParameter("nombre_trabajo", nombre_trabajo) :
                new ObjectParameter("nombre_trabajo", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var color_tintasParameter = color_tintas != null ?
                new ObjectParameter("color_tintas", color_tintas) :
                new ObjectParameter("color_tintas", typeof(string));
    
            var tipo_papelParameter = tipo_papel != null ?
                new ObjectParameter("tipo_papel", tipo_papel) :
                new ObjectParameter("tipo_papel", typeof(string));
    
            var con_folioParameter = con_folio != null ?
                new ObjectParameter("con_folio", con_folio) :
                new ObjectParameter("con_folio", typeof(string));
    
            var del_numeroParameter = del_numero != null ?
                new ObjectParameter("del_numero", del_numero) :
                new ObjectParameter("del_numero", typeof(string));
    
            var al_numeroParameter = al_numero != null ?
                new ObjectParameter("al_numero", al_numero) :
                new ObjectParameter("al_numero", typeof(string));
    
            var tamanoParameter = tamano != null ?
                new ObjectParameter("tamano", tamano) :
                new ObjectParameter("tamano", typeof(string));
    
            var otros_1Parameter = otros_1 != null ?
                new ObjectParameter("otros_1", otros_1) :
                new ObjectParameter("otros_1", typeof(string));
    
            var otros_2Parameter = otros_2 != null ?
                new ObjectParameter("otros_2", otros_2) :
                new ObjectParameter("otros_2", typeof(string));
    
            var copia_1Parameter = copia_1 != null ?
                new ObjectParameter("copia_1", copia_1) :
                new ObjectParameter("copia_1", typeof(string));
    
            var copia_2Parameter = copia_2 != null ?
                new ObjectParameter("copia_2", copia_2) :
                new ObjectParameter("copia_2", typeof(string));
    
            var copia_3Parameter = copia_3 != null ?
                new ObjectParameter("copia_3", copia_3) :
                new ObjectParameter("copia_3", typeof(string));
    
            var copia_4Parameter = copia_4 != null ?
                new ObjectParameter("copia_4", copia_4) :
                new ObjectParameter("copia_4", typeof(string));
    
            var otros_3Parameter = otros_3 != null ?
                new ObjectParameter("otros_3", otros_3) :
                new ObjectParameter("otros_3", typeof(string));
    
            var otros_4Parameter = otros_4 != null ?
                new ObjectParameter("otros_4", otros_4) :
                new ObjectParameter("otros_4", typeof(string));
    
            var pegadoParameter = pegado != null ?
                new ObjectParameter("pegado", pegado) :
                new ObjectParameter("pegado", typeof(string));
    
            var engrapadoParameter = engrapado != null ?
                new ObjectParameter("engrapado", engrapado) :
                new ObjectParameter("engrapado", typeof(string));
    
            var perforacionParameter = perforacion != null ?
                new ObjectParameter("perforacion", perforacion) :
                new ObjectParameter("perforacion", typeof(string));
    
            var rojoParameter = rojo != null ?
                new ObjectParameter("rojo", rojo) :
                new ObjectParameter("rojo", typeof(string));
    
            var blancoParameter = blanco != null ?
                new ObjectParameter("blanco", blanco) :
                new ObjectParameter("blanco", typeof(string));
    
            var especificacionesParameter = especificaciones != null ?
                new ObjectParameter("especificaciones", especificaciones) :
                new ObjectParameter("especificaciones", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var muestraParameter = muestra != null ?
                new ObjectParameter("muestra", muestra) :
                new ObjectParameter("muestra", typeof(string));
    
            var fecha_muestraParameter = fecha_muestra != null ?
                new ObjectParameter("fecha_muestra", fecha_muestra) :
                new ObjectParameter("fecha_muestra", typeof(string));
    
            var prioridadParameter = prioridad != null ?
                new ObjectParameter("prioridad", prioridad) :
                new ObjectParameter("prioridad", typeof(string));
    
            var anticipoParameter = anticipo.HasValue ?
                new ObjectParameter("anticipo", anticipo) :
                new ObjectParameter("anticipo", typeof(double));
    
            var pagadoParameter = pagado != null ?
                new ObjectParameter("pagado", pagado) :
                new ObjectParameter("pagado", typeof(string));
    
            var costo_anteriorParameter = costo_anterior.HasValue ?
                new ObjectParameter("costo_anterior", costo_anterior) :
                new ObjectParameter("costo_anterior", typeof(double));
    
            var horaParameter = hora != null ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(string));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("ruta", ruta) :
                new ObjectParameter("ruta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Crear_Orden", id_clienteParameter, numeroParameter, telefonoParameter, solicitanteParameter, fecha_solicitaParameter, quien_recibioParameter, inicio_disenoParameter, nombre_trabajoParameter, cantidadParameter, color_tintasParameter, tipo_papelParameter, con_folioParameter, del_numeroParameter, al_numeroParameter, tamanoParameter, otros_1Parameter, otros_2Parameter, copia_1Parameter, copia_2Parameter, copia_3Parameter, copia_4Parameter, otros_3Parameter, otros_4Parameter, pegadoParameter, engrapadoParameter, perforacionParameter, rojoParameter, blancoParameter, especificacionesParameter, estadoParameter, tipoParameter, totalParameter, muestraParameter, fecha_muestraParameter, prioridadParameter, anticipoParameter, pagadoParameter, costo_anteriorParameter, horaParameter, rutaParameter);
        }
    
        public virtual int Crear_Salida(Nullable<int> id_materia, Nullable<double> cantidad, string unidad, string fecha_salida, string hora_salida, string notas)
        {
            var id_materiaParameter = id_materia.HasValue ?
                new ObjectParameter("id_materia", id_materia) :
                new ObjectParameter("id_materia", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(double));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("unidad", unidad) :
                new ObjectParameter("unidad", typeof(string));
    
            var fecha_salidaParameter = fecha_salida != null ?
                new ObjectParameter("fecha_salida", fecha_salida) :
                new ObjectParameter("fecha_salida", typeof(string));
    
            var hora_salidaParameter = hora_salida != null ?
                new ObjectParameter("hora_salida", hora_salida) :
                new ObjectParameter("hora_salida", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Crear_Salida", id_materiaParameter, cantidadParameter, unidadParameter, fecha_salidaParameter, hora_salidaParameter, notasParameter);
        }
    
        public virtual int Crear_Usuario(string nombre, string pass, string tipo, string estado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Crear_Usuario", nombreParameter, passParameter, tipoParameter, estadoParameter);
        }
    
        public virtual int Diseno_Terminado(Nullable<int> id_orden, string fecha, string hora_fin)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var hora_finParameter = hora_fin != null ?
                new ObjectParameter("hora_fin", hora_fin) :
                new ObjectParameter("hora_fin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Diseno_Terminado", id_ordenParameter, fechaParameter, hora_finParameter);
        }
    
        public virtual int Eliminar_Comentario(Nullable<int> id_comentario)
        {
            var id_comentarioParameter = id_comentario.HasValue ?
                new ObjectParameter("id_comentario", id_comentario) :
                new ObjectParameter("id_comentario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar_Comentario", id_comentarioParameter);
        }
    
        public virtual int Eliminar_Impresion_Orden(Nullable<int> idimpresion)
        {
            var idimpresionParameter = idimpresion.HasValue ?
                new ObjectParameter("idimpresion", idimpresion) :
                new ObjectParameter("idimpresion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar_Impresion_Orden", idimpresionParameter);
        }
    
        public virtual int Eliminar_Orden(Nullable<int> id_orden)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar_Orden", id_ordenParameter);
        }
    
        public virtual int Eliminar_OrdenMateria(Nullable<int> id_ordenmateria)
        {
            var id_ordenmateriaParameter = id_ordenmateria.HasValue ?
                new ObjectParameter("id_ordenmateria", id_ordenmateria) :
                new ObjectParameter("id_ordenmateria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar_OrdenMateria", id_ordenmateriaParameter);
        }
    
        public virtual int Eliminar_Pago_Factura(Nullable<int> id_pago)
        {
            var id_pagoParameter = id_pago.HasValue ?
                new ObjectParameter("id_pago", id_pago) :
                new ObjectParameter("id_pago", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar_Pago_Factura", id_pagoParameter);
        }
    
        public virtual int Eliminar_Pago_Nota(Nullable<int> id_pago_nota)
        {
            var id_pago_notaParameter = id_pago_nota.HasValue ?
                new ObjectParameter("id_pago_nota", id_pago_nota) :
                new ObjectParameter("id_pago_nota", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar_Pago_Nota", id_pago_notaParameter);
        }
    
        public virtual int Eliminar_Recordatorio(Nullable<int> id_recordatorio)
        {
            var id_recordatorioParameter = id_recordatorio.HasValue ?
                new ObjectParameter("id_recordatorio", id_recordatorio) :
                new ObjectParameter("id_recordatorio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar_Recordatorio", id_recordatorioParameter);
        }
    
        public virtual int Eliminar_Salida(Nullable<int> id_salida)
        {
            var id_salidaParameter = id_salida.HasValue ?
                new ObjectParameter("id_salida", id_salida) :
                new ObjectParameter("id_salida", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar_Salida", id_salidaParameter);
        }
    
        public virtual int Eliminar_Terminado_Orden(Nullable<int> idterminado)
        {
            var idterminadoParameter = idterminado.HasValue ?
                new ObjectParameter("idterminado", idterminado) :
                new ObjectParameter("idterminado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar_Terminado_Orden", idterminadoParameter);
        }
    
        public virtual int Enviar_Orden(Nullable<int> id_orden, string estado)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Enviar_Orden", id_ordenParameter, estadoParameter);
        }
    
        public virtual int Factura_Razon_Cancelado(Nullable<int> id_factura, string razon)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            var razonParameter = razon != null ?
                new ObjectParameter("razon", razon) :
                new ObjectParameter("razon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Factura_Razon_Cancelado", id_facturaParameter, razonParameter);
        }
    
        public virtual int Fecha_Entregado(Nullable<int> id_orden, string fechaentregado)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var fechaentregadoParameter = fechaentregado != null ?
                new ObjectParameter("fechaentregado", fechaentregado) :
                new ObjectParameter("fechaentregado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fecha_Entregado", id_ordenParameter, fechaentregadoParameter);
        }
    
        public virtual int Fecha_Impresion(Nullable<int> id_orden, string fecha)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fecha_Impresion", id_ordenParameter, fechaParameter);
        }
    
        public virtual int Fecha_Por_Entregar(Nullable<int> id_orden, string fecha)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fecha_Por_Entregar", id_ordenParameter, fechaParameter);
        }
    
        public virtual int Fecha_Terminado(Nullable<int> id_orden, string fecha)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fecha_Terminado", id_ordenParameter, fechaParameter);
        }
    
        public virtual int Modificar_Cliente(Nullable<int> id_cliente, string nombre, string domicilio, string colonia, string ciudad, string estado, string codigo_postal, string tipo_persona, string telefono1, string telefono2, string telefono3, string telefono4, string contacto, string rfc, string pseudonimo, string numero_exterior, string numero_interior)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var domicilioParameter = domicilio != null ?
                new ObjectParameter("domicilio", domicilio) :
                new ObjectParameter("domicilio", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("colonia", colonia) :
                new ObjectParameter("colonia", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var codigo_postalParameter = codigo_postal != null ?
                new ObjectParameter("codigo_postal", codigo_postal) :
                new ObjectParameter("codigo_postal", typeof(string));
    
            var tipo_personaParameter = tipo_persona != null ?
                new ObjectParameter("tipo_persona", tipo_persona) :
                new ObjectParameter("tipo_persona", typeof(string));
    
            var telefono1Parameter = telefono1 != null ?
                new ObjectParameter("telefono1", telefono1) :
                new ObjectParameter("telefono1", typeof(string));
    
            var telefono2Parameter = telefono2 != null ?
                new ObjectParameter("telefono2", telefono2) :
                new ObjectParameter("telefono2", typeof(string));
    
            var telefono3Parameter = telefono3 != null ?
                new ObjectParameter("telefono3", telefono3) :
                new ObjectParameter("telefono3", typeof(string));
    
            var telefono4Parameter = telefono4 != null ?
                new ObjectParameter("telefono4", telefono4) :
                new ObjectParameter("telefono4", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("contacto", contacto) :
                new ObjectParameter("contacto", typeof(string));
    
            var rfcParameter = rfc != null ?
                new ObjectParameter("rfc", rfc) :
                new ObjectParameter("rfc", typeof(string));
    
            var pseudonimoParameter = pseudonimo != null ?
                new ObjectParameter("pseudonimo", pseudonimo) :
                new ObjectParameter("pseudonimo", typeof(string));
    
            var numero_exteriorParameter = numero_exterior != null ?
                new ObjectParameter("numero_exterior", numero_exterior) :
                new ObjectParameter("numero_exterior", typeof(string));
    
            var numero_interiorParameter = numero_interior != null ?
                new ObjectParameter("numero_interior", numero_interior) :
                new ObjectParameter("numero_interior", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Modificar_Cliente", id_clienteParameter, nombreParameter, domicilioParameter, coloniaParameter, ciudadParameter, estadoParameter, codigo_postalParameter, tipo_personaParameter, telefono1Parameter, telefono2Parameter, telefono3Parameter, telefono4Parameter, contactoParameter, rfcParameter, pseudonimoParameter, numero_exteriorParameter, numero_interiorParameter);
        }
    
        public virtual int Modificar_Orden_Diseno(Nullable<int> id_orden, Nullable<int> cantidad, string tintas, string papel, string tamano, string notas)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var tintasParameter = tintas != null ?
                new ObjectParameter("tintas", tintas) :
                new ObjectParameter("tintas", typeof(string));
    
            var papelParameter = papel != null ?
                new ObjectParameter("papel", papel) :
                new ObjectParameter("papel", typeof(string));
    
            var tamanoParameter = tamano != null ?
                new ObjectParameter("tamano", tamano) :
                new ObjectParameter("tamano", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Modificar_Orden_Diseno", id_ordenParameter, cantidadParameter, tintasParameter, papelParameter, tamanoParameter, notasParameter);
        }
    
        public virtual int Modificar_Orden_Recepcion(Nullable<int> id_orden, string trabajo, string telefono, Nullable<int> cantidad, string tintas, string papel, string tamano, string del, string al, string otros1, string otros2, string otros3, string otros4, string copia1, string copia2, string copia3, string copia4, string pegado, string engrapado, string perforado, string rojo, string blanco, string notas, Nullable<double> total, Nullable<double> anticipo, Nullable<double> costo_anterior)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var trabajoParameter = trabajo != null ?
                new ObjectParameter("trabajo", trabajo) :
                new ObjectParameter("trabajo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var tintasParameter = tintas != null ?
                new ObjectParameter("tintas", tintas) :
                new ObjectParameter("tintas", typeof(string));
    
            var papelParameter = papel != null ?
                new ObjectParameter("papel", papel) :
                new ObjectParameter("papel", typeof(string));
    
            var tamanoParameter = tamano != null ?
                new ObjectParameter("tamano", tamano) :
                new ObjectParameter("tamano", typeof(string));
    
            var delParameter = del != null ?
                new ObjectParameter("del", del) :
                new ObjectParameter("del", typeof(string));
    
            var alParameter = al != null ?
                new ObjectParameter("al", al) :
                new ObjectParameter("al", typeof(string));
    
            var otros1Parameter = otros1 != null ?
                new ObjectParameter("otros1", otros1) :
                new ObjectParameter("otros1", typeof(string));
    
            var otros2Parameter = otros2 != null ?
                new ObjectParameter("otros2", otros2) :
                new ObjectParameter("otros2", typeof(string));
    
            var otros3Parameter = otros3 != null ?
                new ObjectParameter("otros3", otros3) :
                new ObjectParameter("otros3", typeof(string));
    
            var otros4Parameter = otros4 != null ?
                new ObjectParameter("otros4", otros4) :
                new ObjectParameter("otros4", typeof(string));
    
            var copia1Parameter = copia1 != null ?
                new ObjectParameter("copia1", copia1) :
                new ObjectParameter("copia1", typeof(string));
    
            var copia2Parameter = copia2 != null ?
                new ObjectParameter("copia2", copia2) :
                new ObjectParameter("copia2", typeof(string));
    
            var copia3Parameter = copia3 != null ?
                new ObjectParameter("copia3", copia3) :
                new ObjectParameter("copia3", typeof(string));
    
            var copia4Parameter = copia4 != null ?
                new ObjectParameter("copia4", copia4) :
                new ObjectParameter("copia4", typeof(string));
    
            var pegadoParameter = pegado != null ?
                new ObjectParameter("pegado", pegado) :
                new ObjectParameter("pegado", typeof(string));
    
            var engrapadoParameter = engrapado != null ?
                new ObjectParameter("engrapado", engrapado) :
                new ObjectParameter("engrapado", typeof(string));
    
            var perforadoParameter = perforado != null ?
                new ObjectParameter("perforado", perforado) :
                new ObjectParameter("perforado", typeof(string));
    
            var rojoParameter = rojo != null ?
                new ObjectParameter("rojo", rojo) :
                new ObjectParameter("rojo", typeof(string));
    
            var blancoParameter = blanco != null ?
                new ObjectParameter("blanco", blanco) :
                new ObjectParameter("blanco", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var anticipoParameter = anticipo.HasValue ?
                new ObjectParameter("anticipo", anticipo) :
                new ObjectParameter("anticipo", typeof(double));
    
            var costo_anteriorParameter = costo_anterior.HasValue ?
                new ObjectParameter("costo_anterior", costo_anterior) :
                new ObjectParameter("costo_anterior", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Modificar_Orden_Recepcion", id_ordenParameter, trabajoParameter, telefonoParameter, cantidadParameter, tintasParameter, papelParameter, tamanoParameter, delParameter, alParameter, otros1Parameter, otros2Parameter, otros3Parameter, otros4Parameter, copia1Parameter, copia2Parameter, copia3Parameter, copia4Parameter, pegadoParameter, engrapadoParameter, perforadoParameter, rojoParameter, blancoParameter, notasParameter, totalParameter, anticipoParameter, costo_anteriorParameter);
        }
    
        public virtual int Modificar_Recordatorio(Nullable<int> id_recordatorio, string nombre, string notas, string recordar_cada, string fecha_inicio, string dias_antes, string dias_despues)
        {
            var id_recordatorioParameter = id_recordatorio.HasValue ?
                new ObjectParameter("id_recordatorio", id_recordatorio) :
                new ObjectParameter("id_recordatorio", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            var recordar_cadaParameter = recordar_cada != null ?
                new ObjectParameter("recordar_cada", recordar_cada) :
                new ObjectParameter("recordar_cada", typeof(string));
    
            var fecha_inicioParameter = fecha_inicio != null ?
                new ObjectParameter("fecha_inicio", fecha_inicio) :
                new ObjectParameter("fecha_inicio", typeof(string));
    
            var dias_antesParameter = dias_antes != null ?
                new ObjectParameter("dias_antes", dias_antes) :
                new ObjectParameter("dias_antes", typeof(string));
    
            var dias_despuesParameter = dias_despues != null ?
                new ObjectParameter("dias_despues", dias_despues) :
                new ObjectParameter("dias_despues", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Modificar_Recordatorio", id_recordatorioParameter, nombreParameter, notasParameter, recordar_cadaParameter, fecha_inicioParameter, dias_antesParameter, dias_despuesParameter);
        }
    
        public virtual int Modificar_Tipo_Orden(Nullable<int> id_orden, string tipo)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Modificar_Tipo_Orden", id_ordenParameter, tipoParameter);
        }
    
        public virtual int Modificar_Tipo_Orden_Grupo(Nullable<int> id_factura, string tipo)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Modificar_Tipo_Orden_Grupo", id_facturaParameter, tipoParameter);
        }
    
        public virtual int Modificar_Tipo_Orden_Grupo_Cotizacion(Nullable<int> idcotizacion, string tipo)
        {
            var idcotizacionParameter = idcotizacion.HasValue ?
                new ObjectParameter("idcotizacion", idcotizacion) :
                new ObjectParameter("idcotizacion", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Modificar_Tipo_Orden_Grupo_Cotizacion", idcotizacionParameter, tipoParameter);
        }
    
        public virtual ObjectResult<string> Obtener_Amparo_Factura(Nullable<int> id_factura)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Obtener_Amparo_Factura", id_facturaParameter);
        }
    
        public virtual ObjectResult<Obtener_Bitacora_Diaria_Result> Obtener_Bitacora_Diaria(string fecha, string estado)
        {
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Bitacora_Diaria_Result>("Obtener_Bitacora_Diaria", fechaParameter, estadoParameter);
        }
    
        public virtual ObjectResult<Obtener_Bitacora_Disenador_Result> Obtener_Bitacora_Disenador(Nullable<int> id_usuario, string fecha, string estado)
        {
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Bitacora_Disenador_Result>("Obtener_Bitacora_Disenador", id_usuarioParameter, fechaParameter, estadoParameter);
        }
    
        public virtual ObjectResult<Obtener_Comentarios_Orden_Result> Obtener_Comentarios_Orden(Nullable<int> id_orden)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Comentarios_Orden_Result>("Obtener_Comentarios_Orden", id_ordenParameter);
        }
    
        public virtual ObjectResult<Obtener_Cotizaciones_Fecha_Result> Obtener_Cotizaciones_Fecha(string fecha, Nullable<int> id_cliente)
        {
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Cotizaciones_Fecha_Result>("Obtener_Cotizaciones_Fecha", fechaParameter, id_clienteParameter);
        }
    
        public virtual ObjectResult<Obtener_Cotizaciones_Numero_Result> Obtener_Cotizaciones_Numero(string numero, Nullable<int> id_cliente)
        {
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Cotizaciones_Numero_Result>("Obtener_Cotizaciones_Numero", numeroParameter, id_clienteParameter);
        }
    
        public virtual ObjectResult<Obtener_Datos_Cliente_ID_Result> Obtener_Datos_Cliente_ID(Nullable<int> id_cliente)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Datos_Cliente_ID_Result>("Obtener_Datos_Cliente_ID", id_clienteParameter);
        }
    
        public virtual ObjectResult<Obtener_Datos_Orden_ID_Result> Obtener_Datos_Orden_ID(Nullable<int> id_orden)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Datos_Orden_ID_Result>("Obtener_Datos_Orden_ID", id_ordenParameter);
        }
    
        public virtual ObjectResult<Obtener_Detalle_Cotizacion_Result> Obtener_Detalle_Cotizacion(Nullable<int> idcotizacion)
        {
            var idcotizacionParameter = idcotizacion.HasValue ?
                new ObjectParameter("idcotizacion", idcotizacion) :
                new ObjectParameter("idcotizacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Detalle_Cotizacion_Result>("Obtener_Detalle_Cotizacion", idcotizacionParameter);
        }
    
        public virtual ObjectResult<Obtener_Detalle_Factura_Result> Obtener_Detalle_Factura(Nullable<int> id_factura)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Detalle_Factura_Result>("Obtener_Detalle_Factura", id_facturaParameter);
        }
    
        public virtual ObjectResult<Obtener_Detalle_Notas_Result> Obtener_Detalle_Notas(Nullable<int> id_nota)
        {
            var id_notaParameter = id_nota.HasValue ?
                new ObjectParameter("id_nota", id_nota) :
                new ObjectParameter("id_nota", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Detalle_Notas_Result>("Obtener_Detalle_Notas", id_notaParameter);
        }
    
        public virtual ObjectResult<Obtener_Disenadores_Orden_Result> Obtener_Disenadores_Orden(Nullable<int> id_orden)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Disenadores_Orden_Result>("Obtener_Disenadores_Orden", id_ordenParameter);
        }
    
        public virtual ObjectResult<Obtener_Entrega_Orden_Result> Obtener_Entrega_Orden(Nullable<int> id_orden)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Entrega_Orden_Result>("Obtener_Entrega_Orden", id_ordenParameter);
        }
    
        public virtual ObjectResult<Obtener_Factura_Numero_Result> Obtener_Factura_Numero(Nullable<int> numero, Nullable<int> id_contribuyente)
        {
            var numeroParameter = numero.HasValue ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(int));
    
            var id_contribuyenteParameter = id_contribuyente.HasValue ?
                new ObjectParameter("id_contribuyente", id_contribuyente) :
                new ObjectParameter("id_contribuyente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Factura_Numero_Result>("Obtener_Factura_Numero", numeroParameter, id_contribuyenteParameter);
        }
    
        public virtual ObjectResult<Obtener_Facturas_Cliente_Result> Obtener_Facturas_Cliente(Nullable<int> id_cliente)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Facturas_Cliente_Result>("Obtener_Facturas_Cliente", id_clienteParameter);
        }
    
        public virtual ObjectResult<Obtener_Facturas_Cobranza_Result> Obtener_Facturas_Cobranza(Nullable<int> id_cliente, Nullable<int> id_contribuyente, string pagadas, string canceladas, string numero)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            var id_contribuyenteParameter = id_contribuyente.HasValue ?
                new ObjectParameter("id_contribuyente", id_contribuyente) :
                new ObjectParameter("id_contribuyente", typeof(int));
    
            var pagadasParameter = pagadas != null ?
                new ObjectParameter("pagadas", pagadas) :
                new ObjectParameter("pagadas", typeof(string));
    
            var canceladasParameter = canceladas != null ?
                new ObjectParameter("canceladas", canceladas) :
                new ObjectParameter("canceladas", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Facturas_Cobranza_Result>("Obtener_Facturas_Cobranza", id_clienteParameter, id_contribuyenteParameter, pagadasParameter, canceladasParameter, numeroParameter);
        }
    
        public virtual ObjectResult<Obtener_Impresion_Orden_Result> Obtener_Impresion_Orden(Nullable<int> id_orden)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Impresion_Orden_Result>("Obtener_Impresion_Orden", id_ordenParameter);
        }
    
        public virtual ObjectResult<Obtener_Materiales_Tipo_Result> Obtener_Materiales_Tipo(Nullable<int> tipo)
        {
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Materiales_Tipo_Result>("Obtener_Materiales_Tipo", tipoParameter);
        }
    
        public virtual ObjectResult<Obtener_Notas_Cobranza_Result> Obtener_Notas_Cobranza(string fecha, string pagadas, string canceladas, string numero)
        {
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var pagadasParameter = pagadas != null ?
                new ObjectParameter("pagadas", pagadas) :
                new ObjectParameter("pagadas", typeof(string));
    
            var canceladasParameter = canceladas != null ?
                new ObjectParameter("canceladas", canceladas) :
                new ObjectParameter("canceladas", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Notas_Cobranza_Result>("Obtener_Notas_Cobranza", fechaParameter, pagadasParameter, canceladasParameter, numeroParameter);
        }
    
        public virtual ObjectResult<Obtener_Orden_Area_Result> Obtener_Orden_Area(string area, Nullable<double> numero)
        {
            var areaParameter = area != null ?
                new ObjectParameter("area", area) :
                new ObjectParameter("area", typeof(string));
    
            var numeroParameter = numero.HasValue ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Orden_Area_Result>("Obtener_Orden_Area", areaParameter, numeroParameter);
        }
    
        public virtual ObjectResult<Obtener_Ordenes_Administrador_Fecha_Result> Obtener_Ordenes_Administrador_Fecha(string fecha, Nullable<double> numero)
        {
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var numeroParameter = numero.HasValue ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Ordenes_Administrador_Fecha_Result>("Obtener_Ordenes_Administrador_Fecha", fechaParameter, numeroParameter);
        }
    
        public virtual ObjectResult<Obtener_Ordenes_Cliente_Result> Obtener_Ordenes_Cliente(Nullable<int> id_cliente, string estado)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Ordenes_Cliente_Result>("Obtener_Ordenes_Cliente", id_clienteParameter, estadoParameter);
        }
    
        public virtual ObjectResult<Obtener_Ordenes_Diseno01_Result> Obtener_Ordenes_Diseno01()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Ordenes_Diseno01_Result>("Obtener_Ordenes_Diseno01");
        }
    
        public virtual ObjectResult<Obtener_Ordenes_Para_Factura_Result> Obtener_Ordenes_Para_Factura(Nullable<int> id_cliente)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Ordenes_Para_Factura_Result>("Obtener_Ordenes_Para_Factura", id_clienteParameter);
        }
    
        public virtual ObjectResult<Obtener_Ordenes_Recordatorio_Result> Obtener_Ordenes_Recordatorio(Nullable<int> id_cliente, string trabajo)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            var trabajoParameter = trabajo != null ?
                new ObjectParameter("trabajo", trabajo) :
                new ObjectParameter("trabajo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Ordenes_Recordatorio_Result>("Obtener_Ordenes_Recordatorio", id_clienteParameter, trabajoParameter);
        }
    
        public virtual ObjectResult<Obtener_Pagos_Factura_Result> Obtener_Pagos_Factura(Nullable<int> id_factura)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Pagos_Factura_Result>("Obtener_Pagos_Factura", id_facturaParameter);
        }
    
        public virtual ObjectResult<Obtener_Pagos_Notas_Result> Obtener_Pagos_Notas(Nullable<int> id_nota)
        {
            var id_notaParameter = id_nota.HasValue ?
                new ObjectParameter("id_nota", id_nota) :
                new ObjectParameter("id_nota", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Pagos_Notas_Result>("Obtener_Pagos_Notas", id_notaParameter);
        }
    
        public virtual ObjectResult<Obtener_RecordatoriosCliente_Result> Obtener_RecordatoriosCliente(Nullable<int> id_cliente)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_RecordatoriosCliente_Result>("Obtener_RecordatoriosCliente", id_clienteParameter);
        }
    
        public virtual ObjectResult<Obtener_Salidas_Dia_Result> Obtener_Salidas_Dia(string fecha)
        {
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Salidas_Dia_Result>("Obtener_Salidas_Dia", fechaParameter);
        }
    
        public virtual ObjectResult<Obtener_Terminado_Orden_Result> Obtener_Terminado_Orden(Nullable<int> id_orden)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Obtener_Terminado_Orden_Result>("Obtener_Terminado_Orden", id_ordenParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> Obtener_Total_Pagado_Factura(Nullable<int> id_factura)
        {
            var id_facturaParameter = id_factura.HasValue ?
                new ObjectParameter("id_factura", id_factura) :
                new ObjectParameter("id_factura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("Obtener_Total_Pagado_Factura", id_facturaParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> Obtener_Total_Pagado_Nota(Nullable<int> id_nota)
        {
            var id_notaParameter = id_nota.HasValue ?
                new ObjectParameter("id_nota", id_nota) :
                new ObjectParameter("id_nota", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("Obtener_Total_Pagado_Nota", id_notaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Obtener_Ultimo_IDCliente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Obtener_Ultimo_IDCliente");
        }
    
        public virtual int Orden_Autorizar(Nullable<int> id_orden, string autorizacion)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var autorizacionParameter = autorizacion != null ?
                new ObjectParameter("autorizacion", autorizacion) :
                new ObjectParameter("autorizacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Orden_Autorizar", id_ordenParameter, autorizacionParameter);
        }
    
        public virtual int Orden_Inicio_Diseno(Nullable<int> id_orden, string fecha)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Orden_Inicio_Diseno", id_ordenParameter, fechaParameter);
        }
    
        public virtual int Orden_Muestra(Nullable<int> id_orden, string muestra, string fecha)
        {
            var id_ordenParameter = id_orden.HasValue ?
                new ObjectParameter("id_orden", id_orden) :
                new ObjectParameter("id_orden", typeof(int));
    
            var muestraParameter = muestra != null ?
                new ObjectParameter("muestra", muestra) :
                new ObjectParameter("muestra", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Orden_Muestra", id_ordenParameter, muestraParameter, fechaParameter);
        }
    
        public virtual int Recordatorio_Reiniciar(Nullable<int> id_recordatorio, string fecha)
        {
            var id_recordatorioParameter = id_recordatorio.HasValue ?
                new ObjectParameter("id_recordatorio", id_recordatorio) :
                new ObjectParameter("id_recordatorio", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Recordatorio_Reiniciar", id_recordatorioParameter, fechaParameter);
        }
    
        public virtual int Terminar_Impresion(Nullable<int> idorden, string fechafin, string horafin)
        {
            var idordenParameter = idorden.HasValue ?
                new ObjectParameter("idorden", idorden) :
                new ObjectParameter("idorden", typeof(int));
    
            var fechafinParameter = fechafin != null ?
                new ObjectParameter("fechafin", fechafin) :
                new ObjectParameter("fechafin", typeof(string));
    
            var horafinParameter = horafin != null ?
                new ObjectParameter("horafin", horafin) :
                new ObjectParameter("horafin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Terminar_Impresion", idordenParameter, fechafinParameter, horafinParameter);
        }
    
        public virtual int Terminar_Terminado(Nullable<int> idorden, string fechafin, string horafin)
        {
            var idordenParameter = idorden.HasValue ?
                new ObjectParameter("idorden", idorden) :
                new ObjectParameter("idorden", typeof(int));
    
            var fechafinParameter = fechafin != null ?
                new ObjectParameter("fechafin", fechafin) :
                new ObjectParameter("fechafin", typeof(string));
    
            var horafinParameter = horafin != null ?
                new ObjectParameter("horafin", horafin) :
                new ObjectParameter("horafin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Terminar_Terminado", idordenParameter, fechafinParameter, horafinParameter);
        }
    
        public virtual ObjectResult<string> Verificar_Usuario(string nombre, string password)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Verificar_Usuario", nombreParameter, passwordParameter);
        }
    }
}
